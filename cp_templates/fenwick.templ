template <typename T>
class fenwick {
  vector<T> bit; int N;
public:
  fenwick(int n) { N = n + 5; bit.resize(N);}
  void clear() { fill(bit.begin(), bit.end(), 0); }
  void add(int i, T val) { while (i < N) { bit[i] += val; i += (i & -i);} }
  void add(int l, int r, T val) { add(l, val); add(r + 1, -val);}
  T query(int i) { T ans(0); while (i > 0) { ans += bit[i]; i -= (i & -i); } return ans;} // prefix sum
  T rquery(int l, int r) { return (T)(query(r) - query(l - 1)); } // range sum

};
