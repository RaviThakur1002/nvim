// Combinatorics Template
namespace combinatorics {

template<typename T>
class Combinatorics {
private:
    std::vector<T> fact, inv_fact;

    // Helper function to check if T is a modular type
    template<typename U>
    struct is_modular : std::false_type {};

    template<auto P>
    struct is_modular<mint_ns::Modular<P>> : std::true_type {};

public:
    Combinatorics(int n) : fact(n + 1), inv_fact(n + 1) {
        fact[0] = 1;
        for (int i = 1; i <= n; i++) {
            fact[i] = fact[i - 1] * i;
        }
        if constexpr (is_modular<T>::value) {
            inv_fact[n] = T(1) / fact[n];
            for (int i = n - 1; i >= 0; i--) {
                inv_fact[i] = inv_fact[i + 1] * (i + 1);
            }
        }
    }

    T C(int n, int k) {
        if (k < 0 || k > n) return 0;
        if constexpr (is_modular<T>::value) {
            return fact[n] * inv_fact[k] * inv_fact[n - k];
        } else {
            T result = fact[n];
            result /= fact[k];
            result /= fact[n - k];
            return result;
        }
    }

    T P(int n, int k) {
        if (k < 0 || k > n) return 0;
        if constexpr (is_modular<T>::value) {
            return fact[n] * inv_fact[n - k];
        } else {
            T result = fact[n];
            result /= fact[n - k];
            return result;
        }
    }

    T factorial(int n) {
        if (n < 0) return 0;
        return fact[n];
    }

    T inverse_factorial(int n) {
        if (n < 0 || !is_modular<T>::value) return 0;
        return inv_fact[n];
    }
};

}

using CombiM = combinatorics::Combinatorics<Mint>;
using CombiM1 = combinatorics::Combinatorics<Mint1>;
